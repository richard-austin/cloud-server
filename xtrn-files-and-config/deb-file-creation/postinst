#!/bin/bash

mv /tmp/nginx.conf /etc/nginx
mv /tmp/server.xml /var/lib/tomcat10/conf
mv /tmp/tomcat-users.xml /var/lib/tomcat10/conf
rm -r /var/lib/tomcat10/webapps/ROOT
mv /tmp/cloudwebapp-11.0.0.war /var/lib/tomcat10/webapps/ROOT.war

deb-systemd-invoke stop tomcat10.service  # Stop tomcat before
useradd tomcat
useradd usr-cloud
groupadd grp-cloud
usermod -a -G grp-cloud tomcat
usermod -a -G grp-cloud usr-cloud

chown -R usr-cloud:grp-cloud /var/cloud-server
chown -R usr-cloud:grp-cloud /var/log/cloud

chown -R tomcat:grp-cloud /var/log/cloud/cloud.log* || true # To prevent access denied errors on first starting tomcat
chown -R tomcat:grp-cloud /var/cloud-server/ || true
chown -R tomcat:grp-cloud /var/log/security-cam

chown -R tomcat:tomcat /var/lib/tomcat10
chmod 640 /etc/tomcat10/tomcat-users.xml
chown root:tomcat /var/lib/tomcat10/conf/tomcat-users.xml
chmod 640 /var/lib/tomcat10/conf/server.xml
chown root:tomcat /var/lib/tomcat10/conf/server.xml
chown root:tomcat /etc/cloud-server/privateKey
chmod 440 /etc/cloud-server/privateKey

#
# AddToTomcatUnitFileIfNotPresent: Add ReadWriteFilePaths to the tomcat unit file to enable access to /etc/security-cam
#                                  and /var/log/security-cam.
#
AddToTomcatUnitFileIfNotPresent() {
  lineToWrite=$1
  lineToWriteUnder=$2
  unitFile=$3
  # Enter lineToWrite after lineToWriteUnder if not already present
  if ! grep "$lineToWrite" "$unitFile"; then
    # Add the line after lineToWriteUnder escaping all '/' as the regex is within / delimiters.
    result=$(awk '/'"${lineToWriteUnder//\//\\/}"'/ { print; print '\""${lineToWrite}"\"'; next }1' "$unitFile")
    echo "$result" >"$unitFile"
  fi
}

# Give tomcat permission to write to some additional directories
lineToWrite="ReadWritePaths=/var/log/cloud/"
lineToWrite2="ReadWritePaths=/etc/cloud-server/"
lineToWrite3="ReadWritePaths=/var/cloud-server/"
lineToWriteUnder="ReadWritePaths=/var/log/tomcat10/"
unitFile="/usr/lib/systemd/system/tomcat10.service"

AddToTomcatUnitFileIfNotPresent $lineToWrite $lineToWriteUnder $unitFile
AddToTomcatUnitFileIfNotPresent $lineToWrite2 $lineToWriteUnder $unitFile
AddToTomcatUnitFileIfNotPresent $lineToWrite3 $lineToWriteUnder $unitFile

# Create the client keystore for connection to the NVRs via ActiveMQ
MQ_CREDS_FILE=/var/cloud-server/cloud-creds.json
if ! test -f "$MQ_CREDS_FILE"; then
  kspassword_client=$(tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 40)
  keytool -genkey -alias client -dname "cn=NVR USER, ou=Private, o=Private, c=Unknown st=Unknown" -keypass "$kspassword_client" -storepass "$kspassword_client" -keyalg RSA -keystore /etc/cloud-server/client.ks
  cat > $MQ_CREDS_FILE << EOF
{
   "mqClientKSPath": "/etc/cloud-server/client.ks",
   "mqClientKSPW": "${kspassword_client}",
   "mqUser": "cloud",
   "mqPw": "",
   "mqHost": "192.168.1.82"
}
EOF
  chown tomcat:tomcat /etc/cloud-server/client.ks
  chmod 400 /etc/cloud-server/client.ks
  chmod 400 $MQ_CREDS_FILE
  chown tomcat:tomcat $MQ_CREDS_FILE
fi



#A new group, grp-cloud, is added, then the users tomcat and usr-cloud added to that group.
# The grp-cloud group is then given group access to usr-cloud and it's subdirectories. The user and group permissions are then set up.

# Give directories only permission 775
find /var/cloud-server -type d -print0 | xargs -0 chmod 775
# Give files permission 664
find /var/cloud-server -type f -print0 | xargs -0 chmod 664

mv /tmp/install-cert.sh /var/cloud-server/
chown root:root /var/cloud-server/install-cert.sh
chown -R tomcat:tomcat /var/log/tomcat10
chown -R tomcat:tomcat /var/log/cloud-server

chgrp -R grp-cloud /var/cloud-server/

# Start the services
systemctl daemon-reload
deb-systemd-invoke enable tomcat10.service
deb-systemd-invoke start tomcat10.service
deb-systemd-invoke enable nginx.service

CERT_FILE=/etc/nginx/cloud.crt
if test -f "$CERT_FILE"; then
   deb-systemd-invoke start nginx.service
else
   deb-systemd-invoke stop nginx.service  # On initial install, the certificate won't be present so
                                          # stop
                                          # nginx as it can't work till that is set up.
   echo "To add or update the site key/certificate, run sudo install-cert.sh at www-root."
   echo "Use sudo systemctl start nginx to run nginx."
fi
